const express = require("express");
const { Telegraf } = require("telegraf");
const NodeGeocoder = require("node-geocoder");
const { readJSONFile } = require('./src/helper/file.helper');
const {path, join} = require('path')

const geocoder = NodeGeocoder({
  provider: "openstreetmap",
});

const app = express();
const bot = new Telegraf("6328900544:AAGUthJIp4ExphJnNibxP5Tokm_VIQ2KB_I");

const teachers = readJSONFile("src/model/teachers.json");
const courses = readJSONFile("src/model/courses.json");
const branches = readJSONFile("src/model/branches.json");

function filterTeachersByBranchId(branchId) {
  return teachers.filter((teacher) => teacher.branchId === branchId);
}

function filterCoursesByBranchId(branchId) {
  return courses.filter((course) => {
    const teacher = teachers.find((teacher) => teacher.id === course.teacherId);
    return teacher && teacher.branchId === branchId;
  });
}

app.use(express.json());

bot.start((ctx) => {
  ctx.reply(
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    {
      reply_markup: {
        keyboard: [
          ["üíÅ –û –Ω–∞—Å", "üè¢ –ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å"],
          ["üó∫Ô∏è –§–∏–ª–∏–∞–ª—ã", "üìö –ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤"],
          ["üë• –£—á–∏—Ç–µ–ª—è", "üìú –ü—Ä–∞–≤–∏–ª–∞ –æ–±—É—á–µ–Ω–∏—è"],
          ["üìç –ë–ª–∏–∂–∞–π—â–∏–µ —Ñ–∏–ª–∏–∞–ª—ã"],
        ],
      },
    }
  );
});

bot.hears("üíÅ –û –Ω–∞—Å", (ctx) => {
  const message = `–£—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é - —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å–≤–æ–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ —Å—Ç–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∫—É—Ä—Å–æ–≤, –ø—Ä–æ–≤–æ–¥–∏–º—ã—Ö –æ–ø—ã—Ç–Ω—ã–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É –≤ IT-–∏–Ω–¥—É—Å—Ç—Ä–∏–∏!`;
  ctx.reply(message);
});

bot.hears("üè¢ –ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å", (ctx) => {
  const message = `–ù–∞—à –≥–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123, –ì–æ—Ä–æ–¥. –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –æ—Ñ–∏—Å–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –ñ–¥–µ–º –≤–∞—Å!`;
  ctx.reply(message);
});

bot.hears("üó∫Ô∏è –§–∏–ª–∏–∞–ª—ã", (ctx) => {
  let message = `–£ –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª–æ–≤, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ. \n –í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤: \n
`;
  branches.forEach((branch) => {
    message += `üìç ${branch.title}\n`;
    message += `   üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${branch.phone}\n`;
    message += `   üìß Email: ${branch.email}\n`;
    message += `   üó∫Ô∏è –ê–¥—Ä–µ—Å: ${branch.address}\n\n`;
  });
  ctx.reply(message);
});

bot.hears("üìö –ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤", (ctx) => {
  const branchId = ctx.session?.branchId;
  let filteredCourses = courses;

  if (branchId) {
    filteredCourses = filterCoursesByBranchId(branchId);
  }

  const buttonsPerRow = 2;
  let inlineKeyboard = [];
  let row = [];

  filteredCourses.forEach((course, index) => {
    row.push({
      text: course.shortTitle,
      callback_data: `course:${index}`, 
    });

    if ((index + 1) % buttonsPerRow === 0 || index === filteredCourses.length - 1) {
      inlineKeyboard.push(row);
      row = [];
    }
  });

  let courseNum = 0
  let message = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤:\n\n";
  filteredCourses.forEach((course) => {
      courseNum++
      message += `${courseNum}. ${course.title}\n\n`;
  })
  ctx.reply(message, {
    reply_markup: {
      inline_keyboard: inlineKeyboard,
    },
  });
});

bot.action(/^course:(\d+)$/, (ctx) => {
  const match = ctx.match;
  const courseId = match[1];
  let filteredCourses = courses;

  const course = filteredCourses[courseId];

  const teacher = teachers.find((teacher) => teacher.id === course.teacherId);

  const message = `
    üìå –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: ${course.title} \nüí∞ –¶–µ–Ω–∞: ${course.price} USD \nüó£Ô∏è –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: ${course.languages.join(', ')} \nüìù –û–ø–∏—Å–∞–Ω–∏–µ: \n ${course.description} \n\n üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${teacher.name}
  `;

  ctx.replyWithPhoto({ source: course.image }, {
    caption: message,
    reply_markup:{
      inline_keyboard:[
          [{text:"–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –∫—É—Ä—Å", callback_data:"get course"}]
      ]
    }
  });
});

bot.on('get course', (ctx) => {
  answerCbQuery(`–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç !`);
})

bot.hears("üë• –£—á–∏—Ç–µ–ª—è", (ctx) => {
  let message = "–°–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n";
  teachers.forEach((teacher) => {
    message += `üë®‚Äçüè´ –ò–º—è: ${teacher.name}\n`;
    message += `   üë• –§–∏–ª–∏–∞–ª: ${teacher.branchId}\n\n`;
  });
  ctx.reply(message);
});

bot.hears("üìú –ü—Ä–∞–≤–∏–ª–∞ –æ–±—É—á–µ–Ω–∏—è", (ctx) => {
  const message = `–ü—Ä–∞–≤–∏–ª–∞ –æ–±—É—á–µ–Ω–∏—è –≤ –Ω–∞—à–µ–º —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ:

1. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π.
2. –°–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ —Å–æ–±–ª—é–¥–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è.
3. –ü—Ä–∏–Ω–æ—Å–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.
4. –£–≤–∞–∂–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∏ –º–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
5. –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.
6. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–ª–∏ –ø–ª–∞–≥–∏–∞—Ç–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π.
7. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –∏ –∂–µ–ª–∞–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!`;
  ctx.reply(message);
});

bot.hears("üìç –ë–ª–∏–∂–∞–π—â–∏–µ —Ñ–∏–ª–∏–∞–ª—ã", (ctx) => {
  ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.");
});

bot.on("location", async (ctx) => {
  const { latitude, longitude } = ctx.message.location;

  try {
    const res = await geocoder.reverse({ lat: latitude, lon: longitude });

    if (res && res.length > 0) {
      const city = res[0].city;
      const branchesNear = branches.filter((branch) => branch.city === city);
      let message = "–ë–ª–∏–∂–∞–π—â–∏–µ —Ñ–∏–ª–∏–∞–ª—ã:";
      branchesNear.forEach((branch) => {
        message += `\n ${branch.title}`;
      });
      ctx.reply(message);
    } else {
      ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞.");
  }
});

bot.use((ctx, next) => {
  if (ctx.update?.message?.location) {
    bot.emit("location", ctx);
  }
  return next();
});

app.listen(3000, () => {
  console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000");
});

bot.launch();
